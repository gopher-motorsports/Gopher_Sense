// Autogenerated by SensorCannon
// Hardware config for {{module.name}}

#include "module_hw_config.h"
#include "gopher_sense.h"
#include "GopherCAN.h"
#include "sensors.h"

// CAN PARAMS LIST
// setup the param list

GENERAL_PARAMETER param_list[NUM_CAN_PARAMS] =
{
  {% for param in module.all_params -%}
  {
    .can_param = (&({{param.param_name}}.info)),
    .status = SEND_NEEDED,
	.ms_between_requests = {{param.ms_between_req}}
  },
  {% endfor %}
};

// ***************************************************************************

{% set len = module.adc1_params|length%}
{% if len > 0 %}
// BEGIN ADC1 PARAMS

// give memory to the buffers
{% for param in module.adc1_params %}
{% set i = loop.index %}
#define ADC1_PARAM{{i}}_BUF_SIZE {{param.samples_buffered}}
U16 adc1_param{{i}}_buffer_mem[ADC1_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc1_sensor_params[NUM_ADC1_PARAMS] = 
{
  {% for param in module.adc1_params %}
  {% set i = loop.index %}
  // adc1_param{{i}}
  {
    .gsense_param = param_list + {{param.param_list_loc}},
    .analog_sensor = &{{param.sensor_name}},
    .buffer =
    {
      .buffer = adc1_param{{i}}_buffer_mem,
      .buffer_size = ADC1_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0,
	  .buffer_head = 0
    }
  },
  #undef ADC1_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC1
{% endif %}
// ***************************************************************************
{% set len = module.adc2_params|length%}
{% if len > 0 %}
// BEGIN ADC2 PARAMS

// give memory to the buffers
{% for param in module.adc2_params %}
{% set i = loop.index %}
#define ADC2_PARAM{{i}}_BUF_SIZE {{param.samples_buffered}}
U16 adc2_param{{i}}_buffer_mem[ADC2_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc2_sensor_params[NUM_ADC2_PARAMS] = 
{
  {% for param in module.adc2_params %}
  {% set i = loop.index %}
  // adc2_param{{i}}
  {
    .gsense_param = param_list + {{param.param_list_loc}},
    .analog_sensor = &{{param.sensor_name}},
    .buffer =
    {
      .buffer = adc2_param{{i}}_buffer_mem,
      .buffer_size = ADC2_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0,
	  .buffer_head = 0
    }
  },
  #undef ADC2_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC2
{% endif %}
// ***************************************************************************
{% set len = module.adc3_params|length%}
{% if len > 0 %}
// BEGIN ADC3 PARAMS

// give memory to the buffers
{% for param in module.adc3_params %}
{% set i = loop.index %}
#define ADC3_PARAM{{i}}_BUF_SIZE {{param.samples_buffered}}
U16 adc3_param{{i}}_buffer_mem[ADC3_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc3_sensor_params[NUM_ADC3_PARAMS] = 
{
  {% for param in module.adc3_params %}
  {% set i = loop.index %}
  // adc3_param{{i}}
  {
    .gsense_param = param_list + {{param.param_list_loc}},
    .analog_sensor = &{{param.sensor_name}},
    .buffer =
    {
      .buffer = adc3_param{{i}}_buffer_mem,
      .buffer_size = ADC3_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0,
	  .buffer_head = 0
    }
  },
  #undef ADC3_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC3
{% endif %}
// ***************************************************************************

//END autogenerted file
